/*
 * File: app/view/Dictionarydetail.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CON.view.Dictionarydetail', {
    extend: 'Ext.dataview.DataView',

    requires: [
        'Ext.XTemplate'
    ],

    config: {
        height: '100%',
        itemId: 'mydataview2',
        emptyText: 'No News',
        itemCls: 'con-listitemcls',
        store: 'Words',
        cls: [
            'con-bgcls',
            'con-listitemcls'
        ],
        itemTpl: Ext.create('Ext.XTemplate', 
            '<div style="margin: 20px;color: #fff;font-weight: normal;">',
            '     ',
            '    <span>Line breaks:{linebreaks}</span>',
            '    <div>Pronunciation:{[this.formatPronouncation(values.pronunciation)]}<img style="height: 17px;top: 3px;left: 2px;position: relative;" src="resources/project-images/volume-high1.png" onclick=CON.app.playMusic() />&nbsp;/</div>',
            '    <hr/>',
            '    <div style="font-size:25px;">Definition of {word} in English:</div>',
            '    <div>{[this.formatDefination(values.defination)]}</div>',
            '    <div>{[this.formatDefinationUses(values.defination)]}</div>',
            '    <hr/>',
            '    <div>Synonyms</div>',
            '    <div>{[this.formatDefinationSynonyms(values.defination)]}</div>',
            '    <hr/>',
            '    <div>Antonyms</div>',
            '    <div>{[this.formatDefinationAntonyms(values.defination)]}</div>',
            '    <hr/>',
            '    <div>Origin</div>',
            '    <div>{origin}</div>',
            '',
            '</div>',
            '',
            {
                formatPronouncation: function(values) {

                    var rettext=(values[0].text)+'&nbsp';
                    //window.localStorage.setItem("audiolink",(values[0].audioLink));
                    CON.utils.Global.currentAudiolink=(values[0].audioLink);

                    return rettext;


                },
                playMusic: function() {
                    alert("ooo");
                },
                formatDefination: function(defination) {
                    return (defination[0].partsofspeech);
                },
                formatDefinationUses: function(defination) {
                    var usage=defination[1].usage;
                    var renderHtml="<ol>";
                    for(a in usage){
                        renderHtml+='<li>'+(parseInt(a)+1)+' ) '+(usage[a].stamt)+'</li>';
                    }
                    renderHtml+='</ol>';
                    return renderHtml;
                },
                formatDefinationSynonyms: function(defination) {
                    var usage=defination[2].synonyms;
                    return usage[0].words;

                },
                formatDefinationAntonyms: function(defination) {
                    var usage=defination[3].antonyms;
                    return usage[0].words;

                }
            }
        )
    }

});