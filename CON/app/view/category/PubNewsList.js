/*
 * File: app/view/category/PubNewsList.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CON.view.category.PubNewsList', {
    extend: 'Ext.dataview.List',
    alias: 'widget.pubnewslist',

    requires: [
        'Ext.XTemplate',
        'Ext.SegmentedButton',
        'Ext.plugin.ListPaging'
    ],

    config: {
        title: 'Cup of News',
        cls: 'con-bgcls',
        height: '100%',
        id: 'pubnewslist',
        itemId: 'pubnewslist',
        style: 'bottom:40px;',
        emptyText: 'No News',
        itemCls: 'con-listitemcls',
        selectedCls: 'con-listitem-selectedcls',
        catData: [
            
        ],
        pubData: [
            
        ],
        masked: {
            xtype: 'loadmask',
            message: 'Loading...'
        },
        itemTpl: Ext.create('Ext.XTemplate', 
            '<div class="listtitle-cls">{title}</div>',
            '<div class="listdaysago-cls">',
            '    <B style="color:#FFFFFF;">Last updated : </B>',
            '<tpl>',
            '{[this.getPubDateInHrs(values.pubDate)]}',
            '</tpl>',
            '</div>',
            {
                getPubDateInHrs: function(pubDate) {
                    var returnValue = '';
                    var newsPubDate;

                    if(pubDate.indexOf('0530') < 0){

                        newsPubDate = pubDate + '+0530';
                    }else{

                        newsPubDate = pubDate;
                    }


                    var hrs = (Math.abs((new Date()).valueOf() - new Date(newsPubDate).valueOf() )) / 1000/60/60;

                    if(!Ext.isEmpty(hrs)){
                        if(Math.round(hrs) < 24){
                            returnValue = Math.round(hrs) + ' hours ago';

                        }else{
                            returnValue = Math.round((hrs)/24) + ' days ago';

                        }


                    }else{

                        returnValue = '';
                    }

                    return returnValue;

                }
            }
        ),
        items: [
            {
                xtype: 'segmentedbutton',
                docked: 'top',
                height: '',
                itemId: 'publicationsegbtns',
                minHeight: '35px',
                scrollable: 'horizontal',
                pressedCls: 'buttonselect-cls',
                layout: {
                    type: 'hbox',
                    align: 'center'
                }
            }
        ],
        listeners: [
            {
                fn: 'onMylistInitialize',
                event: 'initialize'
            }
        ],
        plugins: [
            {
                type: 'listpaging'
            }
        ]
    },

    onMylistInitialize: function(component, eOpts) {

        var catPublications = this.config.pubData;
        var segBtn = this.down('segmentedbutton');

        if(!Ext.isEmpty(catPublications) && !Ext.isEmpty(segBtn)){

            var defultPressedBtn = [];
            var pubSeq = 1;

            Ext.Array.each(catPublications,function(publication){
                var pubid=(publication.publicationId);

                var pubStore=Ext.getStore("PublicationList");
                var pubrec=pubStore.find("id",pubid);

                 if(pubrec >= 0){
                    var catBtn = Ext.create('Ext.Button',{
                        width:'160px',
                        height:'30px',
                        text:publication.pubName,
                        pubCategData : publication
                    });
                    if( pubSeq == 1 ){
                    CON.utils.Global.api.currentPubid=parseInt(publication.publicationId );
                   CON.utils.Global.api.currentCatid=parseInt(publication.categoryId );


                    defultPressedBtn.push(catBtn);
                    pubSeq ++;
                   // catBtn.setPressedCls('buttonselect-cls');
                }

                segBtn.add(catBtn);

                }
                //var code=(findrec.get("code"));
                //var newsSettings=window.localStorage.getItem("newsSettings");
                //newsSettings=JSON.parse(newsSettings);
                //alert(newsSettings[code]);




        });


            segBtn.setPressedButtons(defultPressedBtn);
        }



    },

    GroupBy: function(myjson, attr) {
        var sum ={};

            myjson.forEach( function(obj){
               if ( typeof sum[obj[attr]] == 'undefined') {
                 sum[obj[attr]] = 1;
               }
               else {
                 sum[obj[attr]]++;
               }
            });
            return sum;
    }

});